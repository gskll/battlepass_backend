# This file is automatically generated by Keystone, do not modify it manually.
# Modify your Keystone config when you want to change this.

type BattlePass {
  id: ID!
  name: String
  description: String
  status: String
  start_date: DateTime
  end_date: DateTime
  experience: Int
  tiers(
    where: TierWhereInput! = {}
    orderBy: [TierOrderByInput!]! = []
    take: Int
    skip: Int! = 0
  ): [Tier!]
  tiersCount(where: TierWhereInput! = {}): Int
}

scalar DateTime
  @specifiedBy(url: "https://datatracker.ietf.org/doc/html/rfc3339#section-5.6")

input BattlePassWhereUniqueInput {
  id: ID
}

input BattlePassWhereInput {
  AND: [BattlePassWhereInput!]
  OR: [BattlePassWhereInput!]
  NOT: [BattlePassWhereInput!]
  id: IDFilter
  name: StringFilter
  description: StringFilter
  status: StringNullableFilter
  start_date: DateTimeFilter
  end_date: DateTimeFilter
  experience: IntFilter
  tiers: TierManyRelationFilter
}

input IDFilter {
  equals: ID
  in: [ID!]
  notIn: [ID!]
  lt: ID
  lte: ID
  gt: ID
  gte: ID
  not: IDFilter
}

input StringFilter {
  equals: String
  in: [String!]
  notIn: [String!]
  lt: String
  lte: String
  gt: String
  gte: String
  contains: String
  startsWith: String
  endsWith: String
  not: NestedStringFilter
}

input NestedStringFilter {
  equals: String
  in: [String!]
  notIn: [String!]
  lt: String
  lte: String
  gt: String
  gte: String
  contains: String
  startsWith: String
  endsWith: String
  not: NestedStringFilter
}

input StringNullableFilter {
  equals: String
  in: [String!]
  notIn: [String!]
  lt: String
  lte: String
  gt: String
  gte: String
  contains: String
  startsWith: String
  endsWith: String
  not: NestedStringNullableFilter
}

input NestedStringNullableFilter {
  equals: String
  in: [String!]
  notIn: [String!]
  lt: String
  lte: String
  gt: String
  gte: String
  contains: String
  startsWith: String
  endsWith: String
  not: NestedStringNullableFilter
}

input DateTimeFilter {
  equals: DateTime
  in: [DateTime!]
  notIn: [DateTime!]
  lt: DateTime
  lte: DateTime
  gt: DateTime
  gte: DateTime
  not: DateTimeFilter
}

input IntFilter {
  equals: Int
  in: [Int!]
  notIn: [Int!]
  lt: Int
  lte: Int
  gt: Int
  gte: Int
  not: IntFilter
}

input TierManyRelationFilter {
  every: TierWhereInput
  some: TierWhereInput
  none: TierWhereInput
}

input BattlePassOrderByInput {
  id: OrderDirection
  name: OrderDirection
  description: OrderDirection
  status: OrderDirection
  start_date: OrderDirection
  end_date: OrderDirection
  experience: OrderDirection
}

enum OrderDirection {
  asc
  desc
}

input BattlePassUpdateInput {
  name: String
  description: String
  status: String
  start_date: DateTime
  end_date: DateTime
  experience: Int
  tiers: TierRelateToManyForUpdateInput
}

input TierRelateToManyForUpdateInput {
  disconnect: [TierWhereUniqueInput!]
  set: [TierWhereUniqueInput!]
  create: [TierCreateInput!]
  connect: [TierWhereUniqueInput!]
}

input BattlePassUpdateArgs {
  where: BattlePassWhereUniqueInput!
  data: BattlePassUpdateInput!
}

input BattlePassCreateInput {
  name: String
  description: String
  status: String
  start_date: DateTime
  end_date: DateTime
  experience: Int
  tiers: TierRelateToManyForCreateInput
}

input TierRelateToManyForCreateInput {
  create: [TierCreateInput!]
  connect: [TierWhereUniqueInput!]
}

type Tier {
  id: ID!
  name: String
  price: Int
  battlepass: BattlePass
}

input TierWhereUniqueInput {
  id: ID
}

input TierWhereInput {
  AND: [TierWhereInput!]
  OR: [TierWhereInput!]
  NOT: [TierWhereInput!]
  id: IDFilter
  name: StringFilter
  price: IntNullableFilter
  battlepass: BattlePassWhereInput
}

input IntNullableFilter {
  equals: Int
  in: [Int!]
  notIn: [Int!]
  lt: Int
  lte: Int
  gt: Int
  gte: Int
  not: IntNullableFilter
}

input TierOrderByInput {
  id: OrderDirection
  name: OrderDirection
  price: OrderDirection
}

input TierUpdateInput {
  name: String
  price: Int
  battlepass: BattlePassRelateToOneForUpdateInput
}

input BattlePassRelateToOneForUpdateInput {
  create: BattlePassCreateInput
  connect: BattlePassWhereUniqueInput
  disconnect: Boolean
}

input TierUpdateArgs {
  where: TierWhereUniqueInput!
  data: TierUpdateInput!
}

input TierCreateInput {
  name: String
  price: Int
  battlepass: BattlePassRelateToOneForCreateInput
}

input BattlePassRelateToOneForCreateInput {
  create: BattlePassCreateInput
  connect: BattlePassWhereUniqueInput
}

type Level {
  id: ID!
  name: String
  tier: Tier
}

input LevelWhereUniqueInput {
  id: ID
}

input LevelWhereInput {
  AND: [LevelWhereInput!]
  OR: [LevelWhereInput!]
  NOT: [LevelWhereInput!]
  id: IDFilter
  name: StringFilter
  tier: TierWhereInput
}

input LevelOrderByInput {
  id: OrderDirection
  name: OrderDirection
}

input LevelUpdateInput {
  name: String
  tier: TierRelateToOneForUpdateInput
}

input TierRelateToOneForUpdateInput {
  create: TierCreateInput
  connect: TierWhereUniqueInput
  disconnect: Boolean
}

input LevelUpdateArgs {
  where: LevelWhereUniqueInput!
  data: LevelUpdateInput!
}

input LevelCreateInput {
  name: String
  tier: TierRelateToOneForCreateInput
}

input TierRelateToOneForCreateInput {
  create: TierCreateInput
  connect: TierWhereUniqueInput
}

"""
The `JSON` scalar type represents JSON values as specified by [ECMA-404](http://www.ecma-international.org/publications/files/ECMA-ST/ECMA-404.pdf).
"""
scalar JSON
  @specifiedBy(
    url: "http://www.ecma-international.org/publications/files/ECMA-ST/ECMA-404.pdf"
  )

type Mutation {
  createBattlePass(data: BattlePassCreateInput!): BattlePass
  createBattlePasses(data: [BattlePassCreateInput!]!): [BattlePass]
  updateBattlePass(
    where: BattlePassWhereUniqueInput!
    data: BattlePassUpdateInput!
  ): BattlePass
  updateBattlePasses(data: [BattlePassUpdateArgs!]!): [BattlePass]
  deleteBattlePass(where: BattlePassWhereUniqueInput!): BattlePass
  deleteBattlePasses(where: [BattlePassWhereUniqueInput!]!): [BattlePass]
  createTier(data: TierCreateInput!): Tier
  createTiers(data: [TierCreateInput!]!): [Tier]
  updateTier(where: TierWhereUniqueInput!, data: TierUpdateInput!): Tier
  updateTiers(data: [TierUpdateArgs!]!): [Tier]
  deleteTier(where: TierWhereUniqueInput!): Tier
  deleteTiers(where: [TierWhereUniqueInput!]!): [Tier]
  createLevel(data: LevelCreateInput!): Level
  createLevels(data: [LevelCreateInput!]!): [Level]
  updateLevel(where: LevelWhereUniqueInput!, data: LevelUpdateInput!): Level
  updateLevels(data: [LevelUpdateArgs!]!): [Level]
  deleteLevel(where: LevelWhereUniqueInput!): Level
  deleteLevels(where: [LevelWhereUniqueInput!]!): [Level]
}

type Query {
  battlePasses(
    where: BattlePassWhereInput! = {}
    orderBy: [BattlePassOrderByInput!]! = []
    take: Int
    skip: Int! = 0
  ): [BattlePass!]
  battlePass(where: BattlePassWhereUniqueInput!): BattlePass
  battlePassesCount(where: BattlePassWhereInput! = {}): Int
  tiers(
    where: TierWhereInput! = {}
    orderBy: [TierOrderByInput!]! = []
    take: Int
    skip: Int! = 0
  ): [Tier!]
  tier(where: TierWhereUniqueInput!): Tier
  tiersCount(where: TierWhereInput! = {}): Int
  levels(
    where: LevelWhereInput! = {}
    orderBy: [LevelOrderByInput!]! = []
    take: Int
    skip: Int! = 0
  ): [Level!]
  level(where: LevelWhereUniqueInput!): Level
  levelsCount(where: LevelWhereInput! = {}): Int
  keystone: KeystoneMeta!
}

type KeystoneMeta {
  adminMeta: KeystoneAdminMeta!
}

type KeystoneAdminMeta {
  enableSignout: Boolean!
  enableSessionItem: Boolean!
  lists: [KeystoneAdminUIListMeta!]!
  list(key: String!): KeystoneAdminUIListMeta
}

type KeystoneAdminUIListMeta {
  key: String!
  itemQueryName: String!
  listQueryName: String!
  hideCreate: Boolean!
  hideDelete: Boolean!
  path: String!
  label: String!
  singular: String!
  plural: String!
  description: String
  initialColumns: [String!]!
  pageSize: Int!
  labelField: String!
  fields: [KeystoneAdminUIFieldMeta!]!
  initialSort: KeystoneAdminUISort
  isHidden: Boolean!
}

type KeystoneAdminUIFieldMeta {
  path: String!
  label: String!
  isOrderable: Boolean!
  isFilterable: Boolean!
  fieldMeta: JSON
  viewsIndex: Int!
  customViewsIndex: Int
  createView: KeystoneAdminUIFieldMetaCreateView!
  listView: KeystoneAdminUIFieldMetaListView!
  itemView(id: ID): KeystoneAdminUIFieldMetaItemView
  search: QueryMode
}

type KeystoneAdminUIFieldMetaCreateView {
  fieldMode: KeystoneAdminUIFieldMetaCreateViewFieldMode!
}

enum KeystoneAdminUIFieldMetaCreateViewFieldMode {
  edit
  hidden
}

type KeystoneAdminUIFieldMetaListView {
  fieldMode: KeystoneAdminUIFieldMetaListViewFieldMode!
}

enum KeystoneAdminUIFieldMetaListViewFieldMode {
  read
  hidden
}

type KeystoneAdminUIFieldMetaItemView {
  fieldMode: KeystoneAdminUIFieldMetaItemViewFieldMode
}

enum KeystoneAdminUIFieldMetaItemViewFieldMode {
  edit
  read
  hidden
}

enum QueryMode {
  default
  insensitive
}

type KeystoneAdminUISort {
  field: String!
  direction: KeystoneAdminUISortDirection!
}

enum KeystoneAdminUISortDirection {
  ASC
  DESC
}
